#!/bin/python
from abilities import ACADEMIC_ABILITIES
from abilities import ALL_ABILITIES
from abilities import EARLY_LIFE_ABILITIES
from abilities import GENERAL_ABILITIES
from abilities import LATE_LIFE_ABILITIES
from abilities import MARTIAL_ABILITIES
from abilities import PROFESSIONAL_ABILITIES
from abilities import SOCIAL_ABILITIES
from abilities import SURVIVAL_ABILITIES

def gen_options():
  import argparse
  parser = argparse.ArgumentParser(
    description="ABC 123",
    formatter_class=argparse.RawTextHelpFormatter,
  )

  parser.add_argument(
    '--variant',
    type=str,
    default='grog',
    help='The variant of NPC. Choices are "grog", "noble", "covenfolk", "specialist".'
  )

  parser.add_argument(
    '--age',
    type=int,
    default=25,
    help='The age of this NPC. Available range is 6 and above.'
  )

  parser.add_argument(
    '--specialization',
    type=str,
    default="any",
    help='''
      The ability focus of this NPC.
      In addition to naming a specific ability, several "classes" can be specified.
      Available ability classes are: "academic", "religious", "merchant", "social", 
      For Grogs, choices are "great", "single", and "ranged".
      For Nobles, these are "Artsy", "Fartsy", and "Entitled".
      For Specialists you can choose "academic", "crafter", "professional", or "teacher".
      For Covernfolk you get what you get.
    '''
  )
  return parser


class NPC:
  def __init__(self, variant, age, specialization, abilities=None):
    from collections import defaultdict
    self.variant = variant
    self.age = age
    self.specialization = specialization
    self.abilities = defaultdict(int)
    self.characteristics = None
    self.primary_ability = None
    self.secondary = None

  def randomize_abilities(abilities):
    import random
    return abilities[random.randint(0, len(abilities) - 1)]

  def gen_characteristics():
    from gen_characteristics import generate_characteristics
    return generate_characteristics()


  def gen_early_abilities(abilities):
    abilities["Native Language"] = 75
    available_points = 45

    while available_points > 0:
      stat_to_increase = NPC.randomize_abilities(EARLY_LIFE_ABILITIES)
      abilities[stat_to_increase] += 5
      available_points -= 5

    return abilities


  def gen_later_abilities(self):
    primary_ability, secondary = self.set_ability_priorities()
    available_points = (age - 5) * 15
    if self.variant == 'grog':
      pass
    elif self.variant == 'noble':
      pass
    else:
      pass

  def set_ability_priorities(self):
    import random
    primary = self.set_primary_ability()
        
  def set_primary_ability():
    if self.variant == "grog":
      if self.specialization not in MARTIAL_ABILITIES:
        weapon_choice = MARTIAL_ABILITIES[random.randint(0, len(MARTIAL_ABILITIES) - 1)]
        return weapon_choice
      else:
        return self.specialization
    elif self.variant == "noble":
      if self.specialization:
        return self.specialization
      else:
        return


def main():
  args = vars(gen_options().parse_args())
  new_npc = NPC(**args)
  new_npc.abilities = NPC.gen_early_abilities(new_npc.abilities)
  new_npc.characteristics = NPC.gen_characteristics()
  if new_npc.age > 5:
    new_npc.abilities = new_npc.gen_later_abilities()
  print('NEW_NPC:', vars(new_npc))
  return new_npc

if __name__ == '__main__':
  exit(main())
